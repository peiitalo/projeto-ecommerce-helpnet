generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENTE
  VENDEDOR
}

enum PedidoStatusPagamento {
  PENDENTE
  PARCIAL
  PAGO
  EXPIRADO
}

model Administrador {
  AdminID     Int      @id @default(autoincrement())
  Nome        String
  Email       String   @unique
  SenhaHash   String
  Cargo       String?
  NivelAcesso Int      @default(1)
  Ativo       Boolean  @default(true)
  CriadoEm    DateTime @default(now())

  @@map("Administrador")
}

model Categoria {
  CategoriaID Int       @id @default(autoincrement())
  Nome        String
  produtos    Produto[]

  @@map("Categoria")
}

model Cliente {
  ClienteID          Int            @id @default(autoincrement())
  CodigoCliente      Int            @unique
  NomeCompleto       String
  TipoPessoa         String?
  CPF_CNPJ           String         @unique @db.VarChar(255)
  TelefoneFixo       String?
  TelefoneCelular    String?
  Whatsapp           String?
  Email              String         @unique
  InscricaoEstadual  String?
  InscricaoMunicipal String?
  RazaoSocial        String?
  SenhaHash          String
  DataCadastro       DateTime       @default(now())
  // Banking data
  Banco              String?
  Agencia            String?
  ContaCorrente      String?
  TipoConta          String?        // 'corrente', 'poupanca'
  enderecos          Endereco[]
  pedidos            Pedido[]
  role               Role           @default(CLIENTE)
  // Back-relations
  favoritos          Favorito[]
  carrinhoItens      CarrinhoItem[]
  avaliacoes         Avaliacao[]
  Notificacao        Notificacao[]
  clientesVendedor   ClienteVendedor[]
  resetTokens        PasswordResetToken[]

  @@index([Email])
  @@index([DataCadastro])
  @@index([role])
  @@map("Cliente")
}

model Endereco {
  EnderecoID   Int      @id @default(autoincrement())
  ClienteID    Int
  Nome         String
  Complemento  String?
  CEP          String
  CodigoIBGE   String?
  Cidade       String
  UF           String
  TipoEndereco String   @default("Residencial")
  Numero       String?
  Bairro       String
  cliente      Cliente  @relation(fields: [ClienteID], references: [ClienteID])
  Pedido       Pedido[]

  @@map("Endereco")
}

model EnderecoVendedor {
  EnderecoVendedorID Int      @id @default(autoincrement())
  VendedorID         Int
  Nome               String
  Complemento        String?
  CEP                String
  CodigoIBGE         String?
  Cidade             String
  UF                 String
  TipoEndereco       String   @default("Comercial")
  Numero             String?
  Bairro             String
  vendedor           Vendedor @relation(fields: [VendedorID], references: [VendedorID])

  @@map("EnderecoVendedor")
}

model Produto {
  ProdutoID      Int            @id @default(autoincrement())
  Nome           String
  Descricao      String?
  BreveDescricao String?
  Preco          Float
  PrecoOriginal  Float?
  Estoque        Int            @default(0)
  CategoriaID    Int
  EmpresaID      Int?
  VendedorID     Int?
  CodBarras      String?        @unique
  SKU            String         @unique
  Peso           String?
  Dimensoes      String?
  Marca          String?
  Modelo         String?
  Cor            String?
  Garantia       String?
  Origem         String?        @default("Nacional")
  Condicao       String?        @default("Novo")
  FreteGratis    Boolean?       @default(false)
  Desconto       Int?           @default(0)
  PrazoEntrega   String?
  Imagens        String[]       @default([])
  Ativo          Boolean        @default(true)
  criadoEm       DateTime       @default(now())
  itensPedido    ItensPedido[]
  categoria      Categoria      @relation(fields: [CategoriaID], references: [CategoriaID])
  empresa        Empresa?       @relation(fields: [EmpresaID], references: [EmpresaID])
  vendedor       Vendedor?      @relation(fields: [VendedorID], references: [VendedorID])
  // Back-relations
  favoritos      Favorito[]
  carrinhoItens  CarrinhoItem[]
  avaliacoes     Avaliacao[]
  notificacoes   Notificacao[]

  @@index([CategoriaID])
  @@index([Ativo])
  @@index([criadoEm])
  @@index([CategoriaID, Ativo, criadoEm])
  @@map("Produto")
}

model Pedido {
  PedidoID         Int                   @id @default(autoincrement())
  ClienteID        Int
  EnderecoID       Int
  DataPedido       DateTime              @default(now())
  Status           String?
  Total            Float
  Frete            Float                 @default(0) // Valor do frete calculado
  TotalPago        Float                 @default(0)
  StatusPagamento  PedidoStatusPagamento @default(PENDENTE)
  ExpiraEm         DateTime?
  itensPedido      ItensPedido[]
  pagamentosPedido PagamentosPedido[]
  distribuicoes    DistribuicaoPagamentoPedido[]
  cliente          Cliente               @relation(fields: [ClienteID], references: [ClienteID])
  Endereco         Endereco              @relation(fields: [EnderecoID], references: [EnderecoID])
  entregas         Entrega[]

  @@index([ClienteID])
  @@index([Status])
  @@index([StatusPagamento])
  @@map("Pedido")
}

model ItensPedido {
  ItemID        Int     @id @default(autoincrement())
  PedidoID      Int
  ProdutoID     Int
  Quantidade    Int
  PrecoUnitario Float
  pedido        Pedido  @relation(fields: [PedidoID], references: [PedidoID])
  produto       Produto @relation(fields: [ProdutoID], references: [ProdutoID])

  @@index([PedidoID])
  @@index([ProdutoID])
  @@map("ItensPedido")
}

model MetodoPagamento {
  MetodoID         Int                        @id @default(autoincrement())
  Nome             String
  Ativo            Boolean                    @default(true)
  PagamentosPedido PagamentosPedido[]
  distribuicoes    DistribuicaoPagamentoPedido[]

  @@map("MetodoPagamento")
}

model PagamentosPedido {
  PagamentoID     Int             @id @default(autoincrement())
  PedidoID        Int
  MetodoID        Int
  ValorPago       Float
  StatusPagamento String          @default("Pendente")
  DataPagamento   DateTime        @default(now())
  MetodoPagamento MetodoPagamento @relation(fields: [MetodoID], references: [MetodoID])
  pedido          Pedido          @relation(fields: [PedidoID], references: [PedidoID])

  @@index([PedidoID])
  @@index([MetodoID])
  @@map("PagamentosPedido")
}

model DistribuicaoPagamentoPedido {
  DistribuicaoID     Int             @id @default(autoincrement())
  PedidoID           Int
  MetodoID           Int
  ValorAlocado       Float
  ValorPagoAcumulado Float           @default(0)
  MetodoPagamento    MetodoPagamento @relation(fields: [MetodoID], references: [MetodoID])
  pedido             Pedido          @relation(fields: [PedidoID], references: [PedidoID])

  @@index([PedidoID])
  @@unique([PedidoID, MetodoID])
  @@map("DistribuicaoPagamentoPedido")
}

model Empresa {
  EmpresaID  Int        @id @default(autoincrement())
  Nome       String
  Documento  String?    @unique
  Email      String?
  Telefone   String?
  Ativo      Boolean    @default(true)
  CriadoEm   DateTime   @default(now())
  produtos   Produto[]
  vendedores Vendedor[]

  @@index([Ativo])
  @@index([CriadoEm])
  @@map("Empresa")
}

model Vendedor {
  VendedorID   Int           @id @default(autoincrement())
  Nome         String
  Email        String        @unique
  SenhaHash    String
  EmpresaID    Int
  Ativo        Boolean       @default(true)
  CriadoEm     DateTime      @default(now())
  empresa      Empresa       @relation(fields: [EmpresaID], references: [EmpresaID])
  produtos     Produto[]
  notificacoes Notificacao[]
  clientesVendedor ClienteVendedor[]
  enderecosVendedor EnderecoVendedor[]

  @@index([EmpresaID])
  @@index([Ativo])
  @@index([CriadoEm])
  @@map("Vendedor")
}

// ===== Novos modelos para favoritos, carrinho e avaliações =====
model Favorito {
  ClienteID    Int
  ProdutoID    Int
  AdicionadoEm DateTime @default(now())

  cliente Cliente @relation(fields: [ClienteID], references: [ClienteID])
  produto Produto @relation(fields: [ProdutoID], references: [ProdutoID])

  @@unique([ClienteID, ProdutoID], name: "ClienteID_ProdutoID")
  @@index([ClienteID])
  @@index([ProdutoID])
  @@map("Favorito")
}

model CarrinhoItem {
  CarrinhoItemID Int      @id @default(autoincrement())
  ClienteID      Int
  ProdutoID      Int
  Quantidade     Int      @default(1)
  AdicionadoEm   DateTime @default(now())

  cliente Cliente @relation(fields: [ClienteID], references: [ClienteID])
  produto Produto @relation(fields: [ProdutoID], references: [ProdutoID])

  @@unique([ClienteID, ProdutoID], name: "ClienteID_ProdutoID")
  @@index([ClienteID])
  @@index([ProdutoID])
  @@map("CarrinhoItem")
}

model Avaliacao {
  AvaliacaoID Int      @id @default(autoincrement())
  ClienteID   Int
  ProdutoID   Int
  Nota        Int
  Comentario  String?
  CriadoEm    DateTime @default(now())

  cliente Cliente @relation(fields: [ClienteID], references: [ClienteID])
  produto Produto @relation(fields: [ProdutoID], references: [ProdutoID])

  @@unique([ClienteID, ProdutoID], name: "ClienteID_ProdutoID")
  @@index([ClienteID])
  @@index([ProdutoID])
  @@map("Avaliacao")
}

model Notificacao {
  NotificacaoID Int      @id @default(autoincrement())
  Titulo        String
  Mensagem      String
  Tipo          String   @default("info") // info, warning, success, error
  VendedorID    Int?
  ClienteID     Int?
  Lida          Boolean  @default(false)
  CriadoEm      DateTime @default(now())

  vendedor         Vendedor? @relation(fields: [VendedorID], references: [VendedorID])
  cliente          Cliente?  @relation(fields: [ClienteID], references: [ClienteID])
  Produto          Produto?  @relation(fields: [produtoProdutoID], references: [ProdutoID])
  produtoProdutoID Int?

  @@index([VendedorID])
  @@index([ClienteID])
  @@index([Lida])
  @@map("Notificacao")
}

// Relacionamento entre clientes e vendedores para gestão de clientes
model ClienteVendedor {
  ClienteVendedorID Int      @id @default(autoincrement())
  ClienteID         Int
  VendedorID        Int
  AdicionadoEm      DateTime @default(now())
  UltimoPedidoEm    DateTime?
  TotalPedidos      Int      @default(0)
  ValorTotal        Float    @default(0)

  cliente   Cliente   @relation(fields: [ClienteID], references: [ClienteID])
  vendedor  Vendedor  @relation(fields: [VendedorID], references: [VendedorID])

  @@unique([ClienteID, VendedorID])
  @@index([ClienteID])
  @@index([VendedorID])
  @@map("ClienteVendedor")
}

// Sistema de rastreamento de entregas
model Entrega {
  EntregaID       Int            @id @default(autoincrement())
  PedidoID        Int
  Transportadora  String?
  CodigoRastreio  String?        @unique
  StatusEntrega   String         @default("AguardandoEnvio") // AguardandoEnvio, Enviado, EmTransito, Entregue, Cancelado
  DataEnvio       DateTime?
  DataEntrega     DateTime?
  PrevisaoEntrega DateTime?
  Observacoes     String?
  CriadoEm        DateTime       @default(now())
  AtualizadoEm    DateTime       @updatedAt

  pedido          Pedido         @relation(fields: [PedidoID], references: [PedidoID])
  rastreamentos   Rastreamento[]

  @@index([PedidoID])
  @@index([StatusEntrega])
  @@map("Entrega")
}

model Rastreamento {
  RastreamentoID  Int      @id @default(autoincrement())
  EntregaID       Int
  Status          String   // Descrição do status (Ex: "Postado", "Em trânsito", "Saiu para entrega")
  Local           String?  // Local onde ocorreu o evento
  DataHora        DateTime @default(now())
  Observacoes     String?

  entrega         Entrega  @relation(fields: [EntregaID], references: [EntregaID])

  @@index([EntregaID])
  @@map("Rastreamento")
}

model PasswordResetToken {
  TokenID     Int      @id @default(autoincrement())
  ClienteID   Int
  Token       String   @unique
  ExpiresAt   DateTime
  Used        Boolean  @default(false)
  CriadoEm    DateTime @default(now())

  cliente     Cliente  @relation(fields: [ClienteID], references: [ClienteID])

  @@index([ClienteID])
  @@index([Token])
  @@index([ExpiresAt])
  @@map("PasswordResetToken")
}
